# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12iekGMM91SJrE0vqo9hK4i5P_t7tcF-G

# Import Data

Source Data: https://www.kaggle.com/shuyangli94/food-com-recipes-and-user-interactions?select=RAW_recipes.csv
"""



"""# Data Preprocessing

"""

# import basic libraries
import numpy as np
import pandas as pd
import tensorflow
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
import seaborn as sns
sns.set()

"""#### Download Data
Source Data: https://www.kaggle.com/shuyangli94/food-com-recipes-and-user-interactions?select=RAW_recipes.csv
"""

df_raw_recipe = pd.read_csv('/content/RAW_recipes.csv')
df_raw_recipe.head()

df_PP_recipe = pd.read_csv('/content/PP_recipes.csv')
df_PP_recipe.head()

df_PP_recipe = pd.merge(df_PP_recipe,df_raw_recipe)
df_PP_recipe.sort_values(by='i', inplace=True)
df_PP_recipe.head()

data,data2,data3 = '/content/interactions_test.csv', '/content/interactions_train.csv', '/content/interactions_validation.csv'

df = pd.read_csv(data)
df2 = pd.read_csv(data2)
df3 = pd.read_csv(data3)
df_train_rating = pd.concat([df,df2,df3]).drop_duplicates()
df_train_rating.head()

"""#### Create Utility Matrix"""

#Users-items utility matrix
from scipy.sparse import csr_matrix, vstack, hstack
from pandas.api.types import CategoricalDtype

item_c = CategoricalDtype(sorted(df_train_rating.i.unique()), ordered=True)
user_c = CategoricalDtype(sorted(df_train_rating.u.unique()), ordered=True)

col = df_train_rating.i.astype(item_c).cat.codes
row = df_train_rating.u.astype(user_c).cat.codes
interactions = csr_matrix((df_train_rating["rating"], (row, col)), \
                           shape=(user_c.categories.size,item_c.categories.size))

interactions

"""#### Create Dictionary containing Items and Users informations


"""

def create_item_dict(df,id_col,name_col):
    item_dict = {}
    for i in range(df.shape[0]):
        item_dict[(df.loc[i,id_col])] = df.loc[i,name_col]
    return item_dict

def create_user_dict(df,user_ids_col,u_col):
    user_id = list(df[user_ids_col])
    user_dict = {}
    u_index = list(df[u_col])
    for i in range(len(user_id)):
        user_dict[user_id[i]] = u_index[i]
    return user_dict

item_dict = create_item_dict(df_PP_recipe,'i','name')
#item_dict

user_dict = create_user_dict(df_train_rating,'user_id','u')
#user_dict

"""### Create Item's Features Map"""

def convert_string_to_float(s):
  s = s.replace('[','').replace(']','')
  s = np.fromstring(s,dtype=float,sep=',')
  return s

"""#### Nutritions values

"""

str_nutritions = df_PP_recipe.nutrition.values
nutrition_labels = ['calories', 'total fat (PDV)', 'sugar (PDV)' , 'sodium (PDV)' , 'protein (PDV)' , 'saturated fat (PDV)', 'carbohydrates (PDV)']

flt_nutritions = []
for i in str_nutritions:
  flt_nutritions.append(convert_string_to_float(i))

nutritions_map = {'recipe_id':[]}
for i in nutrition_labels: 
  nutritions_map[i] = []

ids = df_PP_recipe.i.values 
nutritions_map['recipe_id'] = ids 
calories = []
totalfat = []
sugar = []
na = []
protein = []
sat_fat = []
carb = []
for map in flt_nutritions: 
  calories.append(map[0])
  totalfat.append(map[1])
  sugar.append(map[2])
  na.append(map[3])
  protein.append(map[4])
  sat_fat.append(map[5])
  carb.append(map[6])

nutritions_map['calories']=calories
nutritions_map['total fat (PDV)']=totalfat
nutritions_map['sugar (PDV)']=sugar
nutritions_map['sodium (PDV)']=na
nutritions_map['protein (PDV)']=protein
nutritions_map['saturated fat (PDV)']=sat_fat
nutritions_map['carbohydrates (PDV)']=carb

df_nutritions = pd.DataFrame(data = nutritions_map)
df_nutritions.head()

"""#### Recipe's Requirements Informations"""

minutes = df_PP_recipe.minutes.values
steps = df_PP_recipe.n_steps.values
ingredients = df_PP_recipe.n_ingredients.values

features = {'recipe_id':[],'minutes':[],'n_steps':[],'n_ingredient':[]}
features['recipe_id'] = ids
features['minutes'] = minutes
features['n_steps'] = steps
features['n_ingredient'] = ingredients

df_embed = pd.DataFrame(data = features)
df_embed.head()

df_embed = pd.merge(df_embed,df_nutritions)
df_embed

"""#### Define Food Type base on ingredients"""

df_PP_recipe = pd.concat([df_PP_recipe,df_nutritions['calories']],axis=1)
df_PP_recipe['food types'] = np.nan
df_PP_recipe['food types'] = df_PP_recipe['food types'].astype('str')

for i in df_PP_recipe['ingredients'].index:
    if('eggs' not in df_PP_recipe['ingredients'][i]):
         if('ice-cream' in df_PP_recipe['ingredients'][i] or 'chocolate' in df_PP_recipe['ingredients'][i] or 'cookies' in df_PP_recipe['ingredients'][i]):
                df_PP_recipe['food types'][i]='Veg dessert'
    elif('eggs' in df_PP_recipe['ingredients'][i]):
        if('ice-cream' in df_PP_recipe['ingredients'][i] or 'chocolate' in df_PP_recipe['ingredients'][i] or 'cookies' in df_PP_recipe['ingredients'][i]):
                df_PP_recipe['food types'][i]='Non-Veg dessert'

for i in df_PP_recipe.index:
    if(df_PP_recipe['food types'][i]!='Veg dessert' and df_PP_recipe['food types'][i]!='Non-Veg dessert' and 20<df_PP_recipe['calories'][i]<300):
        df_PP_recipe['food types'][i]='Healthy'

for i in df_PP_recipe.index:
    if(df_PP_recipe['food types'][i]!='Veg dessert' and df_PP_recipe['food types'][i]!='Non-Veg dessert' and df_PP_recipe['food types'][i]!='Healthy'):
        if('chicken' in df_PP_recipe['ingredients'][i] or 'eggs' in df_PP_recipe['ingredients'][i] or'ham' in df_PP_recipe['ingredients'][i] or 'pepperoni' in df_PP_recipe['ingredients'][i] ):
            df_PP_recipe['food types'][i]='Non-veg'
for i in df_PP_recipe.index:
    if(df_PP_recipe['food types'][i]!='Veg dessert' and df_PP_recipe['food types'][i]!='Non-Veg dessert' and df_PP_recipe['food types'][i]!='Healthy' and df_PP_recipe['food types'][i]!='Non-veg'):
        df_PP_recipe['food types'][i]='Veg'

df_PP_recipe['food types'].value_counts()

df_PP_recipe['food types'].isnull().sum()

types = pd.get_dummies(df_PP_recipe['food types'])

df_embed = pd.concat([df_embed,types],axis=1)
df_embed.drop(columns=(['recipe_id']),axis=1,inplace=True)
df_embed.head()

item_features = csr_matrix(df_embed.values)
item_features


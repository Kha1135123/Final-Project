# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12iekGMM91SJrE0vqo9hK4i5P_t7tcF-G

# Import Data

Source Data: https://www.kaggle.com/shuyangli94/food-com-recipes-and-user-interactions?select=RAW_recipes.csv
"""


"""# Recommender System

### LightFM Implementation
"""

!pip install -qq lightfm

from lightfm import LightFM
from lightfm.cross_validation import random_train_test_split
from lightfm.evaluation import *

# Split interactions to train and test sets 
train, test = random_train_test_split(interactions,test_percentage=0.1,random_state=42)

"""##### Define LightFM model"""

hybrid = LightFM(no_components=32,random_state=42,loss='warp',item_alpha=1e-06,user_alpha=1e-06)
hybrid.fit(train,user_features,item_features,epochs=10,num_threads=4,verbose=True)

"""##### Evaluation: AUC score

"""

hybrid_train_auc = auc_score(hybrid,train,item_features=item_features,user_features=user_features,num_threads=4)
hybrid_test_auc = auc_score(hybrid,test,train_interactions=train,item_features=item_features,user_features=user_features,num_threads=4)

print('Hybrid model train AUC score: %.5f' %hybrid_train_auc.mean())
print('Hybrid model test AUC score: %.5f' %hybrid_test_auc.mean())

"""### Recommend Definitions
[Link to code](https://github.com/aayushmnit/cookbook/blob/master/recsys.py)
"""

def sample_recommendation_user(model, interactions, user_id, 
                               item_dict,threshold = 3,nrec_items = 0, show = True):
    n_users, n_items = interactions.shape
    user_x = user_dict[user_id]
    scores = pd.Series(model.predict(user_ids = user_x,item_ids=np.arange(n_users),item_features=item_features,user_features=user_features))
    scores = list(pd.Series(scores.sort_values(ascending=False).index))
    user_rated_items = interactions.getrow(user_x).nonzero()
    thr = np.where(interactions.getrow(user_x)[user_rated_items] > threshold)[]
    user_rated_items = user_rated_items[0][thr]
    known_items = list(pd.Series([user_rated_items]).sort_values(ascending=False))
    
    scores = [x for x in scores if x not in known_items[0]]
    return_score_list = scores[0:nrec_items]
    known_names = []
    for i in known_items[0]:
      known_names.append(item_dict[i])
    scores = list(pd.Series(return_score_list).apply(lambda x: item_dict[x]))
    if show == True:
        print("Known Likes:")
        counter = 
        for i in known_names:
            print(str(counter) + '- ' + i)
            counter+=

        print("\n Recommended Items:")
        counter = 
        for i in scores:
            print(str(counter) + '- ' + i)
            counter+=
    return return_score_list


def recommendation(model, interactions, user_id, item_dict,threshold = 0,nrec_items = 0):
  rec_items_ids = sample_recommendation_user(model, interactions, user_id,item_dict,threshold,nrec_items, show = False)
  rec_items = []
  output = ''
  for i in rec_items_ids:
    rec_items.append(item_dict[i])
  output += 'Recipe you might like: \n'
  counter = 
  for i in rec_items:
    output += str(counter) + '- ' + i + '\n'
    counter+=
  return output

pip install -qq gradio

name_dict = {}
import gradio as gr
import random

def username(name,name_dict):
  from random import randint
  new_i = len(user_dict)
  new_id = randint(0,1e7)
  while new_id in user_dict:
    new_id = randint(0,1e7)
  user_dict[new_id]=new_i
  name_dict[name] = new_id

  return name, new_id
def generate_id(name):
    new, user_id = username(name,name_dict)
    out = 'Welcome to FuKaKukku!\n'
    out += '------------------------------\n'
    out += 'Your new username: {}. Id: {} \n'.format(name,user_id)
    out += '------------------------------\n'
    out += 'Please sign in to join FukkaKukku!'
    return out
def recommend(are_you_new,name,veg,healthy,dsrt):
  if are_you_new: 
    if name in name_dict:
      return 'Username already existed!'
    else:
      out = generate_id(name)
      global interactions
      global user_features
      new_interact = csr_matrix(np.zeros((1,interactions.shape[1])))
      interactions = csr_matrix(vstack([new_interact,interactions]))
      new_u_features = np.zeros((user_features.shape[1]))
      if veg == 'Yes':
        new_u_features[3] += 0.2
        new_u_features[4] -= 0.2
        new_u_features[2] -= 0.2
        new_u_features[1] += 0.2
      else:
        new_u_features[3] += 0.2
        new_u_features[4] += 0.2
        new_u_features[2] += 0.2
        new_u_features[1] += 0.2
      if healthy == 'Yes':
        new_u_features[0] += 0.2
      else:
        new_u_features[0] -= 0.2
      if dsrt == 'Yes':
        if veg =='Yes':
          new_u_features[2] -= 0.2
          new_u_features[1] += 0.2
        else:
          new_u_features[2] += 0.2
          new_u_features[1] += 0.2
      else:
        new_u_features[2] -= 0.5
        new_u_features[1] -= 0.5
        sum = np.sum(new_u_features)
        for i in range(len(new_u_features)):
          new_u_features[i] = new_u_features[i]/sum
      new_u_features = csr_matrix(new_u_features)
      user_features = csr_matrix(vstack([new_u_features,user_features]))
      return out
  else:
    if name not in name_dict: 
      warning = 'You have not registered yet. \n'
      warning += '------------------------------\n'
      warning += 'Please check the New to FuKKaKukku checkbox to register.'
      return warning
    else:  
      user_id = name_dict[name]
      rec = recommendation(hybrid,interactions,user_id,item_dict,threshold = 3)
      greet = 'Hello {}! Welcome to FuKaKukku! \n'.format(name)
      greet += rec
      return greet



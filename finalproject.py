# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12iekGMM91SJrE0vqo9hK4i5P_t7tcF-G

# Import Data

Source Data: https://www.kaggle.com/shuyangli94/food-com-recipes-and-user-interactions?select=RAW_recipes.csv
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip '/content/drive/MyDrive/archive (1).zip'

"""# Data Preprocessing

"""

# import basic libraries
import numpy as np
import pandas as pd
import tensorflow
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
import seaborn as sns
sns.set()

"""#### Download Data

"""

df_raw_recipe = pd.read_csv('/content/RAW_recipes.csv')
df_raw_recipe.head()

df_PP_recipe = pd.read_csv('/content/PP_recipes.csv')
df_PP_recipe.head()

df_PP_recipe = pd.merge(df_PP_recipe,df_raw_recipe)
df_PP_recipe.sort_values(by='i', inplace=True)
df_PP_recipe.head()

data,data2,data3 = '/content/interactions_test.csv', '/content/interactions_train.csv', '/content/interactions_validation.csv'

df = pd.read_csv(data)
df2 = pd.read_csv(data2)
df3 = pd.read_csv(data3)
df_train_rating = pd.concat([df,df2,df3]).drop_duplicates()
df_train_rating.head()

"""#### Create Utility Matrix"""

#Users-items utility matrix
from scipy.sparse import csr_matrix, vstack, hstack
from pandas.api.types import CategoricalDtype

item_c = CategoricalDtype(sorted(df_train_rating.i.unique()), ordered=True)
user_c = CategoricalDtype(sorted(df_train_rating.u.unique()), ordered=True)

col = df_train_rating.i.astype(item_c).cat.codes
row = df_train_rating.u.astype(user_c).cat.codes
interactions = csr_matrix((df_train_rating["rating"], (row, col)), \
                           shape=(user_c.categories.size,item_c.categories.size))

interactions

"""#### Create Dictionary containing Items and Users informations


"""

def create_item_dict(df,id_col,name_col):
    item_dict = {}
    for i in range(df.shape[0]):
        item_dict[(df.loc[i,id_col])] = df.loc[i,name_col]
    return item_dict

def create_user_dict(df,user_ids_col,u_col):
    user_id = list(df[user_ids_col])
    user_dict = {}
    u_index = list(df[u_col])
    for i in range(len(user_id)):
        user_dict[user_id[i]] = u_index[i]
    return user_dict

item_dict = create_item_dict(df_PP_recipe,'i','name')
#item_dict

user_dict = create_user_dict(df_train_rating,'user_id','u')
#user_dict

"""### Create Item's Features Map"""

def convert_string_to_float(s):
  s = s.replace('[','').replace(']','')
  s = np.fromstring(s,dtype=float,sep=',')
  return s

"""#### Nutritions values

"""

str_nutritions = df_PP_recipe.nutrition.values
nutrition_labels = ['calories', 'total fat (PDV)', 'sugar (PDV)' , 'sodium (PDV)' , 'protein (PDV)' , 'saturated fat (PDV)', 'carbohydrates (PDV)']

flt_nutritions = []
for i in str_nutritions:
  flt_nutritions.append(convert_string_to_float(i))

nutritions_map = {'recipe_id':[]}
for i in nutrition_labels: 
  nutritions_map[i] = []

ids = df_PP_recipe.i.values 
nutritions_map['recipe_id'] = ids 
calories = []
totalfat = []
sugar = []
na = []
protein = []
sat_fat = []
carb = []
for map in flt_nutritions: 
  calories.append(map[0])
  totalfat.append(map[1])
  sugar.append(map[2])
  na.append(map[3])
  protein.append(map[4])
  sat_fat.append(map[5])
  carb.append(map[6])

nutritions_map['calories']=calories
nutritions_map['total fat (PDV)']=totalfat
nutritions_map['sugar (PDV)']=sugar
nutritions_map['sodium (PDV)']=na
nutritions_map['protein (PDV)']=protein
nutritions_map['saturated fat (PDV)']=sat_fat
nutritions_map['carbohydrates (PDV)']=carb

df_nutritions = pd.DataFrame(data = nutritions_map)
df_nutritions.head()

"""#### Recipe's Requirements Informations"""

minutes = df_PP_recipe.minutes.values
steps = df_PP_recipe.n_steps.values
ingredients = df_PP_recipe.n_ingredients.values

features = {'recipe_id':[],'minutes':[],'n_steps':[],'n_ingredient':[]}
features['recipe_id'] = ids
features['minutes'] = minutes
features['n_steps'] = steps
features['n_ingredient'] = ingredients

df_embed = pd.DataFrame(data = features)
df_embed.head()

df_embed = pd.merge(df_embed,df_nutritions)
df_embed

"""#### Define Food Type base on ingredients"""

df_PP_recipe = pd.concat([df_PP_recipe,df_nutritions['calories']],axis=1)
df_PP_recipe['food types'] = np.nan
df_PP_recipe['food types'] = df_PP_recipe['food types'].astype('str')

for i in df_PP_recipe['ingredients'].index:
    if('eggs' not in df_PP_recipe['ingredients'][i]):
         if('ice-cream' in df_PP_recipe['ingredients'][i] or 'chocolate' in df_PP_recipe['ingredients'][i] or 'cookies' in df_PP_recipe['ingredients'][i]):
                df_PP_recipe['food types'][i]='Veg dessert'
    elif('eggs' in df_PP_recipe['ingredients'][i]):
        if('ice-cream' in df_PP_recipe['ingredients'][i] or 'chocolate' in df_PP_recipe['ingredients'][i] or 'cookies' in df_PP_recipe['ingredients'][i]):
                df_PP_recipe['food types'][i]='Non-Veg dessert'

for i in df_PP_recipe.index:
    if(df_PP_recipe['food types'][i]!='Veg dessert' and df_PP_recipe['food types'][i]!='Non-Veg dessert' and 20<df_PP_recipe['calories'][i]<300):
        df_PP_recipe['food types'][i]='Healthy'

for i in df_PP_recipe.index:
    if(df_PP_recipe['food types'][i]!='Veg dessert' and df_PP_recipe['food types'][i]!='Non-Veg dessert' and df_PP_recipe['food types'][i]!='Healthy'):
        if('chicken' in df_PP_recipe['ingredients'][i] or 'eggs' in df_PP_recipe['ingredients'][i] or'ham' in df_PP_recipe['ingredients'][i] or 'pepperoni' in df_PP_recipe['ingredients'][i] ):
            df_PP_recipe['food types'][i]='Non-veg'
for i in df_PP_recipe.index:
    if(df_PP_recipe['food types'][i]!='Veg dessert' and df_PP_recipe['food types'][i]!='Non-Veg dessert' and df_PP_recipe['food types'][i]!='Healthy' and df_PP_recipe['food types'][i]!='Non-veg'):
        df_PP_recipe['food types'][i]='Veg'

df_PP_recipe['food types'].value_counts()

df_PP_recipe['food types'].isnull().sum()

types = pd.get_dummies(df_PP_recipe['food types'])

df_embed = pd.concat([df_embed,types],axis=1)
df_embed.drop(columns=(['recipe_id']),axis=1,inplace=True)
df_embed.head()

item_features = csr_matrix(df_embed.values)
item_features

"""### Users Features"""

df_users = pd.read_csv('/content/PP_users.csv')
df_users.head()

user_u = df_users.u.values
user_features_dict = {'u':user_u}
labels = ['Healthy','Veg dessert','Non-Veg dessert','Veg','Non-veg']
for i in labels: 
  user_features_dict[i] = []

users_embed =[]
for u in user_u: 
  df_u = df_users.loc[df_users['u']==u]
  str_item_list = df_u['items'].values
  str_rating_list = df_u['ratings'].values
  item_list = convert_string_to_float(str_item_list[0])
  rating_list = convert_string_to_float(str_rating_list[0])
  type_item_list = []
  u_embed = []
  for i in item_list: 
      df = df_PP_recipe.loc[df_PP_recipe['i']==i]
      type_item_list.append(df['food types'].values[0])
  sum = np.sum(rating_list)

  for j in labels:
      sum_type_rating = 0 
      embed_value = 0
      if j not in type_item_list:
        u_embed.append(0)
      else:
        for index in range(len(type_item_list)):
          if j == type_item_list[index]:    
              sum_type_rating += rating_list[index]
        if sum ==0:
          embed_value -= 0.1
        else:
          embed_value = sum_type_rating/sum
        u_embed.append(embed_value)
  if np.sum(u_embed) != 1:
      u_embed = np.array(u_embed)
      fill_value =  - np.sum(u_embed)
      zeros = np.where(u_embed==0)[0]
      fill_value = fill_value / len(zeros)
      u_embed = np.where(u_embed==0,fill_value,u_embed)
  users_embed.append(u_embed)

healthy = []
veg_dsrt = []
nonveg_dsrt = []
veg = []
nonveg  = []
for user in users_embed:
    healthy.append(user[0])
    veg_dsrt.append(user[1])
    nonveg_dsrt.append(user[2])
    veg.append(user[3])
    nonveg.append(user[4])
user_features_dict['Healthy'] = healthy
user_features_dict['Veg dessert'] = veg_dsrt
user_features_dict['Non-Veg dessert'] = nonveg_dsrt
user_features_dict['Veg'] = veg
user_features_dict['Non-veg'] = nonveg

df_u_embed = pd.DataFrame(data= user_features_dict)
df_u_embed.drop(columns=(['u']),axis=1,inplace=True)
df_u_embed

user_features = csr_matrix(df_u_embed)
user_features

"""# Recommender System

### LightFM Implementation
"""

!pip install -qq lightfm

from lightfm import LightFM
from lightfm.cross_validation import random_train_test_split
from lightfm.evaluation import *

# Split interactions to train and test sets 
train, test = random_train_test_split(interactions,test_percentage=0.1,random_state=42)

"""##### Define LightFM model"""

hybrid = LightFM(no_components=32,random_state=42,loss='warp',item_alpha=1e-06,user_alpha=1e-06)
hybrid.fit(train,user_features,item_features,epochs=10,num_threads=4,verbose=True)

"""##### Evaluation: AUC score

"""

hybrid_train_auc = auc_score(hybrid,train,item_features=item_features,user_features=user_features,num_threads=4)
hybrid_test_auc = auc_score(hybrid,test,train_interactions=train,item_features=item_features,user_features=user_features,num_threads=4)

print('Hybrid model train AUC score: %.5f' %hybrid_train_auc.mean())
print('Hybrid model test AUC score: %.5f' %hybrid_test_auc.mean())

"""### Recommend Definitions
[Link to code](https://github.com/aayushmnit/cookbook/blob/master/recsys.py)
"""

def sample_recommendation_user(model, interactions, user_id, 
                               item_dict,threshold = 3,nrec_items = 0, show = True):
    n_users, n_items = interactions.shape
    user_x = user_dict[user_id]
    scores = pd.Series(model.predict(user_ids = user_x,item_ids=np.arange(n_users),item_features=item_features,user_features=user_features))
    scores = list(pd.Series(scores.sort_values(ascending=False).index))
    user_rated_items = interactions.getrow(user_x).nonzero()
    thr = np.where(interactions.getrow(user_x)[user_rated_items] > threshold)[]
    user_rated_items = user_rated_items[0][thr]
    known_items = list(pd.Series([user_rated_items]).sort_values(ascending=False))
    
    scores = [x for x in scores if x not in known_items[0]]
    return_score_list = scores[0:nrec_items]
    known_names = []
    for i in known_items[0]:
      known_names.append(item_dict[i])
    scores = list(pd.Series(return_score_list).apply(lambda x: item_dict[x]))
    if show == True:
        print("Known Likes:")
        counter = 
        for i in known_names:
            print(str(counter) + '- ' + i)
            counter+=

        print("\n Recommended Items:")
        counter = 
        for i in scores:
            print(str(counter) + '- ' + i)
            counter+=
    return return_score_list


def recommendation(model, interactions, user_id, item_dict,threshold = 0,nrec_items = 0):
  rec_items_ids = sample_recommendation_user(model, interactions, user_id,item_dict,threshold,nrec_items, show = False)
  rec_items = []
  output = ''
  for i in rec_items_ids:
    rec_items.append(item_dict[i])
  output += 'Recipe you might like: \n'
  counter = 
  for i in rec_items:
    output += str(counter) + '- ' + i + '\n'
    counter+=
  return output

pip install -qq gradio

name_dict = {}
import gradio as gr
import random

def username(name,name_dict):
  from random import randint
  new_i = len(user_dict)
  new_id = randint(0,1e7)
  while new_id in user_dict:
    new_id = randint(0,1e7)
  user_dict[new_id]=new_i
  name_dict[name] = new_id

  return name, new_id
def generate_id(name):
    new, user_id = username(name,name_dict)
    out = 'Welcome to FuKaKukku!\n'
    out += '------------------------------\n'
    out += 'Your new username: {}. Id: {} \n'.format(name,user_id)
    out += '------------------------------\n'
    out += 'Please sign in to join FukkaKukku!'
    return out
def recommend(are_you_new,name,veg,healthy,dsrt):
  if are_you_new: 
    if name in name_dict:
      return 'Username already existed!'
    else:
      out = generate_id(name)
      global interactions
      global user_features
      new_interact = csr_matrix(np.zeros((1,interactions.shape[1])))
      interactions = csr_matrix(vstack([new_interact,interactions]))
      new_u_features = np.zeros((user_features.shape[1]))
      if veg == 'Yes':
        new_u_features[3] += 0.2
        new_u_features[4] -= 0.2
        new_u_features[2] -= 0.2
        new_u_features[1] += 0.2
      else:
        new_u_features[3] += 0.2
        new_u_features[4] += 0.2
        new_u_features[2] += 0.2
        new_u_features[1] += 0.2
      if healthy == 'Yes':
        new_u_features[0] += 0.2
      else:
        new_u_features[0] -= 0.2
      if dsrt == 'Yes':
        if veg =='Yes':
          new_u_features[2] -= 0.2
          new_u_features[1] += 0.2
        else:
          new_u_features[2] += 0.2
          new_u_features[1] += 0.2
      else:
        new_u_features[2] -= 0.5
        new_u_features[1] -= 0.5
        sum = np.sum(new_u_features)
        for i in range(len(new_u_features)):
          new_u_features[i] = new_u_features[i]/sum
      new_u_features = csr_matrix(new_u_features)
      user_features = csr_matrix(vstack([new_u_features,user_features]))
      return out
  else:
    if name not in name_dict: 
      warning = 'You have not registered yet. \n'
      warning += '------------------------------\n'
      warning += 'Please check the New to FuKKaKukku checkbox to register.'
      return warning
    else:  
      user_id = name_dict[name]
      rec = recommendation(hybrid,interactions,user_id,item_dict,threshold = 3)
      greet = 'Hello {}! Welcome to FuKaKukku! \n'.format(name)
      greet += rec
      return greet

"""##  Demo UI using Gradio
<br>

#### How to use:
- For new users:
  - Tick *New to FuKaKukku* checkbox and type your new user name to register
  - Untick *New to FUKKAKUKKU* and Re-submit
  - The Recommender System will give you items you might like.
- For registered users:
  - Type your username to the textbox and the Recommender System will do the rest.
<br>
 
 ##### Of course this demo is solely for demo purpose, as the name suggested. We can not rate items using this interface as Gradio module has its own limit.


"""

iface = gr.Interface(
  fn=recommend, 
  inputs=[gr.inputs.Checkbox(label='New to FukkaKukku?'),
          gr.inputs.Textbox(label='Username:'),
          gr.inputs.Radio(['Yes','No'], label='Are you a vegetarian:'),
          gr.inputs.Radio(['Yes','No'], label='Do you want a Healthy dish:'),
          gr.inputs.Radio(['Yes','No'], label='Do you want a main dish:')
          ], 
  outputs=[gr.outputs.Textbox(label='Welcome')],
  title='Welcome to FuKaKukku'
  )
iface.launch()

"""#### New interactions data inputs Section

"""

df_new = pd.read_csv('/content/drive/MyDrive/Dataset final project/Demo Data.csv')
df_new

"""##### Visualize Demo Data:
Link to demo data: [click here](https://docs.google.com/spreadsheets/d/ohd2GuRR8L2ebJfp2BnZj9aILw40IRqQvJB-iD6acA/edit#gid=20253765)
"""

def user_update(model,interactions,user_features,new_df,name_col,i_col,rate_col,user_dict):
  username = new_df[name_col].values
  users = []
  for i in username:
    if len(users)==0:
      users.append(i)
    else:
      if i not in users:
        users.append(i)
        

  for n in users:
    user_id = name_dict[str(n)]
    u = user_dict[user_id]
    u_rating = np.zeros(shape=(interactions.shape[1]))
    df_user = new_df.loc[new_df[name_col]==n]
    item_i = df_user[i_col].values
    rating = df_user[rate_col].values
    for i in range(len(item_i)):
      u_rating[item_i[i]] = rating[i]
    interactions[u,:] = csr_matrix(u_rating)
    
    type_item_list = []
    u_embed = []
    for i in item_i: 
      df = df_PP_recipe.loc[df_PP_recipe['i']==i]
      type_item_list.append(df['food types'].values[0])
    sum_rating = np.sum(rating)
    for j in labels:
      sum_type_rating = 0 
      embed_value = 0
      if j not in type_item_list:
        u_embed.append(0)
      else:
        for index in range(len(type_item_list)):
          if j == type_item_list[index]:    
              sum_type_rating += rating[index]
        if sum ==0:
          embed_value -= 0.
        else:
          embed_value = sum_type_rating/sum
        u_embed.append(embed_value)
    if np.sum(u_embed) != 1:
        u_embed = np.array(u_embed)
        fill_value =  - np.sum(u_embed)
        zeros = np.where(u_embed==0)[0]
        fill_value = fill_value / len(zeros)
        u_embed = np.where(u_embed==0,fill_value,u_embed)
    user_features[u,:] = csr_matrix(u_embed)


  model.fit(interactions,item_features=item_features,user_features=user_features,epochs=5,num_threads=4,verbose = True)   

  print('Updated')
  return interactions, user_features, model

user_update(hybrid,interactions,user_features,df_new,'user_name','i','rating',user_dict)

"""###### Reset interactions, user_dict, name_dict in case something gone wrong

"""

interactions = csr_matrix((df_train_rating["rating"], (row, col)), \
                           shape=(user_c.categories.size,item_c.categories.size))
user_dict = create_user_dict(df_train_rating,'user_id','u')
name_dict = {}
user_features = csr_matrix(df_u_embed)

